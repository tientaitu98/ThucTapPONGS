#ifndef __OBJECT__
#define __OBJECT__

#include "Points.h"



#endif __OBJECT
#ifndef __POINT__
#define __POINT__

#include <Windows.h>
#include <iostream>

using namespace std;

#define row_console 25
#define column_console 40

enum state {LEFT = 1,RIGHT = 2,UP = 3,DOWN = 4};

void gotoxy(int x,int y)
{
        static HANDLE h = NULL;
        if(!h)
                h = GetStdHandle(STD_OUTPUT_HANDLE);
        COORD c = {x,y};
        SetConsoleCursorPosition(h,c);
}

class Point
{
private:
        char Instance;
        int x,y;
public:
        Point()
        {
                x = 0;
                y = 0;
        }
        Point(int x,int y)
        {
                this->x = x;
                this->y = y;
        }
        void setIns(char ch)
        {
                this->Instance = ch;
        }
        char getIns()
        {
                return this->Instance;
        }
        void setX(int x)
        {
                this->x = x;
        }
        int getX()
        {
                return this->x;
        }
        void setY(int y)
        {
                this->y = y;
        }
        int getY()
        {
                return this->y;
        }
		///////////////////////MINHBQ////////////////////////////
		friend bool operator==(const Point &a, const Point &b) {
			return a.x == b.x && a.y == b.y;
		}
        ///////////////////////MINHBQ////////////////////////////
        
};

#endif __POINT__
#ifndef __BALL__
#define __BALL__

#include "Points.h"
#include "Bar.h"

class Ball
{
private:
	Point coord[2];
	state hori,verti;
public:
	Ball()
	{
		coord[0].setX(15);
		coord[0].setY(20);
		coord[0].setIns('*');
		coord[1].setX(14);
		coord[1].setY(21);
		coord[1].setIns(32);
		hori = RIGHT;
		verti = UP;
	}
	void move()
	{
		if(hori == RIGHT)
		{
			coord[1].setX(coord[0].getX());			
			coord[0].setX(coord[0].getX() + 1);
		}
		else if(hori == LEFT)
		{
			coord[1].setX(coord[0].getX());			
			coord[0].setX(coord[0].getX() - 1);
		}
		if(verti == UP)
		{
			coord[1].setY(coord[0].getY());
			coord[0].setY(coord[0].getY() - 1);
		}
		else if(verti == DOWN)
		{
			coord[1].setY(coord[0].getY());
			coord[0].setY(coord[0].getY() + 1);
		}
	}

	int impact(Bar bar)
	{
		//impac wall border 
		if(hori == LEFT)
		{
			if(coord[0].getX() <= 1)
			{
				hori = RIGHT;
			}
		}
		else if(hori == RIGHT)
		{
			if(coord[0].getX() >= 38)
			{
				hori = LEFT;
			}
		}

		if(verti == UP)
		{
			if(coord[0].getY() <= 1)
			{
				verti = DOWN;
			}
		}	
		//....	
		//impact bar border
		if(coord[0].getX() >= bar.returncoord()[0].getX() && coord[0].getX() <= bar.returncoord()[bar.getLength() - 1].getX())
		{
			if(coord[0].getY() == bar.returncoord()[0].getY())
			{
				if(verti == DOWN)
				{
					verti = UP;
				}	
			}			
		}
		if(coord[0].getY() > bar.returncoord()[0].getY())
			{
				return 0;
			}
	}

	void Show()
	{
		for(int i = 0;i < 2;i++)
		{
			gotoxy(coord[i].getX(),coord[i].getY());
			cout<<coord[i].getIns();
		}
	}

};

#endif __BALL__
#ifndef __BAR__
#define __BAR__

#include "Points.h"
#include <conio.h>

char key;

class Bar
{
private:
        //char Instance;
        Point block[15];
        //int begin_pos;
        //int direction;
        int length;
public:
        Bar()
        {
                length = 8;
                //direction = 0;
                //begin_pos = 0;
                /*
                block[0].setX(15);
                block[0].setY(22);
                block[0].setIns(32);
                */
                //
                block[0].setX(15);
                block[0].setY(22);
                block[0].setIns(196);
                //


                for(int i = 1;i < length;i++)
                {
                        block[i].setX(block[i-1].getX() + 1);
                        block[i].setY(block[i-1].getY());                
                        block[i].setIns(196);
                }
                //
                //block[this->length - 1].setIns(32);
                //
        }
        
        void move()
        {
                if(_kbhit())
                {
                        key = _getch();                        
                        if(key == 'a')
                        {
                                if(block[0].getX() > 1)
                                {                                        
                                        int i = length - 1;
                                        for(i;i > 0;i--)
                                        {
                                                block[i].setX(block[i-1].getX());
                                        }
                                        block[0].setX(block[0].getX() - 1);                                
                                }
                        }
                        else if(key == 'd')
                        {
                                if(block[length - 1].getX() < 38)
                                {
                                        for(int i = 0;i < length - 1;i++)
                                        {
                                                block[i].setX(block[i+1].getX());
                                        }
                                        block[length - 1].setX(block[length - 1].getX() + 1);                                        
                                }                                        
                        }
                }                                
        }

        void show()
        {
            //
            gotoxy(1, block[0].getY());
            for(int i = 2; i < column_console; i++)
                {                         
                        cout<<" ";
                }
            gotoxy(block[0].getX(),block[0].getY());
            for(int i = 0; i < length;i++)
                {                        
                        cout<<block[i].getIns();
                }
            //
            /*
                for(int i = 0;i < length;i++)
                {                        
                        gotoxy(block[i].getX(),block[i].getY());
                        cout<<block[i].getIns();
                }
                */
        }
		Point* returncoord()
		{
			return block;
		}

		int getLength()
		{
			return this->length;
		}

};

#endif __BAR__
#include<vector>
#include "Points.h"
#include "Bar.h"
#include "Ball.h"

using namespace std;

int direction;
Bar bar;
//edit ,insert ball
Ball ball;
///////////////////////MINHBQ////////////////////////////
vector<Point> objects;
char map[row_console][column_console];
void genarateRandomObjects(int objNum) {
	while(objNum--) {
		int x, y;
		do {
			x = rand()%(row_console/3) + 1;
			y = rand()%(column_console - 2) + 1;
		} while(count(objects.begin(), objects.end(), Point(x, y)));
		objects.push_back(Point(x, y));
	}
}

void initMap() {
	for(int i = 0; i < row_console;i++)
	{
		for(int j = 0;j < column_console;j++)
		{
			if(i == 0 || i == row_console - 1 || j == 0 || j == column_console - 1)
				map[i][j] = 178;
			else 
				map[i][j] = ' ';
		}
	}

	for(int i = 0; i < objects.size(); i++) {
		int x = objects[i].getX();
		int y = objects[i].getY();
		map[x][y] = 240;
	}
}
void drawMap() {
	for(int i = 0; i < row_console;i++)
	{
		for(int j = 0;j < column_console;j++)
		{
			cout << map[i][j];
		}
		cout<<endl;
	}
}
///////////////////////MINHBQ////////////////////////////
int main()
{
        ///////////////////////MINHBQ////////////////////////////
	genarateRandomObjects(200);
	initMap();
    drawMap();
	///////////////////////MINHBQ////////////////////////////
        bar.show();        
        while(true)
        {        
                //gotoxy(0,0);
				ball.move();	//edit
				if(!ball.impact(bar))
				{
					break;
				}	//edit
				ball.Show();	//edit                
                bar.move();
                bar.show();
                Sleep(100);
        }
        gotoxy(45,25);
		cout<<"You are lose";
        _getch();
        return 0;
}
